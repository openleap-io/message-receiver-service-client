openapi: 3.0.1
info:
  title: Message Receiver Service API
  description: API documentation generated by SpringDoc
  version: '1.0'
servers:
  - url: https://uniapitest.datapart-factoring.de/gw
    description: Uni Api Test Server
  - url: http://localhost:8080
    description: Localhost Test Server with logger profile
  - url: http://localhost:8086/gw
    description: Localhost Test Server with gateway
security:
  - UniApiKeycloakOauth2: []
  - LocalKeycloakOauth2: []
tags:
  - name: Message API
    description: Endpoints for retrieving and managing messages
  - name: Ignore
    description: Swagger is not adding schemas if no endpoints are defined. This is a dummy controller to ensure schemas are generated.
paths:
  /mrs/message:
    post:
      tags:
        - Message API
      summary: Send a message
      description: Accepts a message payload and queues it for asynchronous processing. Returns HTTP 202 Accepted if the request is valid and accepted for processing. Validation errors or malformed requests will result in a 400 Bad Request response.
      operationId: sendMessage
      requestBody:
        description: The message to be sent. Must include all required fields.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequest'
            examples:
              Teams Channel Example:
                summary: Message request using the TEAMS channel and TEMPLATE message type.
                description: Teams Channel Example
                value:
                  recipients:
                    - id: kirilarsov@gmail.com
                      channel:
                        channelType: TEAMS
                        channelId: '1234567890'
                        tenantId: '1234567890'
                  message:
                    messageType: TEMPLATE
                    name: Teams message template
                    templateParams:
                      param1: value1
                      param2: value2
                    attachments:
                      - name: host-A.log
                        contentType: text/plain
                        base64Data: dGVzdA==
                        url: https://example.com/test.txt
              Slack Channel Example:
                summary: Message request using the SLACK channel and TEMPLATE message type.
                description: Slack Channel Example
                value:
                  recipients:
                    - id: kirilarsov@gmail.com
                      channel:
                        channelType: SLACK
                        channelId: C1234567890
                        channelName: general
                  message:
                    messageType: TEMPLATE
                    name: Slack message template
                    templateParams:
                      param1: value1
                      param2: value2
              Email Channel Example:
                summary: Message request using the EMAIL channel and TEMPLATE message type.
                description: Email Channel Example
                value:
                  recipients:
                    - id: kirilarsov@gmail.com
                      channel:
                        channelType: EMAIL
                        bcc: user@domain.com
                  message:
                    messageType: TEMPLATE
                    name: Email message template
                    templateParams:
                      param1: value1
                      param2: value2
                    attachments:
                      - name: host-A.log
                        contentType: text/plain
                        base64Data: dGVzdA==
                        url: https://example.com/test.txt
              Another Email Channel Example:
                summary: Message request using the EMAIL channel and CUSTOM message type.
                description: Another Email Channel Example
                value:
                  recipients:
                    - id: kirilarsov@gmail.com
                      channel:
                        channelType: EMAIL
                        bcc: user@domain.com
                  message:
                    messageType: CUSTOM
                    name: Email message template
                    subject: Application Error Alert
                    body: Take action immediately!
                    attachments:
                      - name: host-A.log
                        contentType: text/plain
                        base64Data: dGVzdA==
                        url: https://example.com/test.txt
              Telegram Channel Example:
                summary: Message request using the TELEGRAM channel and TEMPLATE message type.
                description: Telegram Channel Example
                value:
                  recipients:
                    - channel:
                        channelType: TELEGRAM
                        chatId: '@oltesme'
                  message:
                    messageType: TEMPLATE
                    name: Teams message template
                    templateParams:
                      param1: value1
                      param2: value2
                    attachments:
                      - name: host-A.log
                        contentType: text/plain
                        base64Data: dGVzdA==
                        url: https://example.com/test.txt
        required: true
      responses:
        '202':
          description: Message accepted for processing
        '400':
          description: Invalid request payload or validation failure
          content:
            application/json: {}
        '401':
          description: Unauthorized - invalid or missing authentication credentials
        '500':
          description: Internal server error
      security:
        - UniApiKeycloakOauth2: []
        - LocalKeycloakOauth2: []
  /TemplateMessage:
    get:
      tags:
        - Ignore
      operationId: dummyTemplateMessageEndpoint
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TemplateMessage'
      deprecated: true
  /TelegramChannel:
    get:
      tags:
        - Ignore
      operationId: dummyTelegramChannelEndpoint
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TelegramChannel'
      deprecated: true
  /TeamsChannel:
    get:
      tags:
        - Ignore
      operationId: dummyTeamsChannelEndpoint
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TeamsChannel'
      deprecated: true
  /SlackChannel:
    get:
      tags:
        - Ignore
      operationId: dummySlackChannelEndpoint
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SlackChannel'
      deprecated: true
  /EmailChannel:
    get:
      tags:
        - Ignore
      operationId: dummyEndpoint
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmailChannel'
      deprecated: true
  /CustomMessage:
    get:
      tags:
        - Ignore
      operationId: dummyCustomMessageEndpoint
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomMessage'
      deprecated: true
components:
  schemas:
    Attachment:
      type: object
      properties:
        name:
          type: string
          description: Attachment name
          example: test.txt
        contentType:
          type: string
          description: Content type of the attachment
          example: text/plain
        base64Data:
          type: string
          description: Base64 encoded data of the attachment
          example: dGVzdA==
        url:
          type: string
          description: URL of the attachment
          example: https://example.com/test.txt
      description: Attachment model for API response
    Channel:
      required:
        - channelType
      type: object
      properties:
        channelType:
          type: string
          description: Type of notification channel
          example: TEAMS
          enum:
            - EMAIL
            - SLACK
            - TEAMS
            - TELEGRAM
      description: Channel model for API request.
      example:
        channelType: TEAMS
        channelId: '1234567890'
        tenantId: '1234567890'
      discriminator:
        propertyName: channelType
    CustomMessage:
      type: object
      description: Custom message implementation
      allOf:
        - $ref: '#/components/schemas/Message'
    EmailChannel:
      required:
        - channelType
      type: object
      description: Email channel model for API request
      example:
        channelType: MAIL
        bcc: user@domain.com
      allOf:
        - $ref: '#/components/schemas/Channel'
        - type: object
          properties:
            cc:
              type: string
              description: List of email addresses to send to
              example: <EMAIL>
            bcc:
              type: string
              description: List of email addresses to send to
              example: <EMAIL>
    Message:
      type: object
      properties:
        messageType:
          type: string
          description: Message type for API request
          example: TEMPLATE
          enum:
            - TEMPLATE
            - CUSTOM
        subject:
          type: string
          description: Message subject
          example: Test message
        body:
          type: string
          description: Message body
          example: This is a test message
        attachments:
          type: array
          description: List of attachments
          items:
            $ref: '#/components/schemas/Attachment'
      description: Message interface
      discriminator:
        propertyName: messageType
    MessageRequest:
      required:
        - message
        - recipients
      type: object
      properties:
        recipients:
          type: array
          description: List of recipients
          items:
            $ref: '#/components/schemas/Recipient'
        message:
          $ref: '#/components/schemas/Message'
      description: Message model for API request
    Recipient:
      required:
        - channel
        - id
      type: object
      properties:
        id:
          maxLength: 256
          type: string
          description: Unique identifier of the recipient
          example: kirilarsov@gmail.com
        channel:
          $ref: '#/components/schemas/Channel'
      description: Recipient model for API request
    SlackChannel:
      required:
        - channelType
      type: object
      description: Slack channel model for API request
      example:
        channelType: SLACK
        channelId: C1234567890
        channelName: general
      allOf:
        - $ref: '#/components/schemas/Channel'
        - type: object
          properties:
            channelId:
              type: string
              description: Slack channel ID
              example: C1234567890
            channelName:
              type: string
              description: Slack channel name
              example: general
    TeamsChannel:
      required:
        - channelType
      type: object
      description: Teams channel model for API request
      example:
        channelType: TEAMS
        channelId: '1234567890'
        tenantId: '1234567890'
      allOf:
        - $ref: '#/components/schemas/Channel'
        - type: object
          properties:
            channelId:
              type: string
              description: Teams channel ID
              example: '1234567890'
            tenantId:
              type: string
              description: Teams tenant ID
              example: '1234567890'
    TelegramChannel:
      required:
        - channelType
      type: object
      description: Telegram channel model for API request
      example:
        channelType: TELEGRAM
        chatId: '@oltesme'
      allOf:
        - $ref: '#/components/schemas/Channel'
        - type: object
          properties:
            chatId:
              type: string
              description: Telegram chat id
              example: '@oltesme'
    TemplateMessage:
      type: object
      description: Template message implementation
      example:
        messageType: TEMPLATE
        name: test-template
        templateParams:
          key1: value1
          key2: value2
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: object
          properties:
            name:
              type: string
              description: Template name
              example: test-template
            templateParams:
              type: object
              additionalProperties:
                type: string
                description: Template parameters
                example: '{"key1":"value1","key2":"value2"}'
              description: Template parameters
              example:
                key1: value1
                key2: value2
  securitySchemes:
    LocalKeycloakOauth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: http://keycloak-web:8090/realms/openleap-realm/protocol/openid-connect/token
          scopes:
            mrs_send: Message Receiver Service Send Scope
    UniApiKeycloakOauth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://idptest.datapart-factoring.de/realms/master/protocol/openid-connect/token
          scopes:
            mrs_send: Message Receiver Service Send Scope
